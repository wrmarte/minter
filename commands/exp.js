const { SlashCommandBuilder, AttachmentBuilder } = require('discord.js');
const fetch = require('node-fetch');

const flavorMap = {
  rich: [
    'üí∏ {user} just flexed their bags. Money talks.',
    'ü§ë {user} is feeling extra loaded today.',
    'üßà {user} buttery wallet energy detected!',
    'üí∞ Who needs banks when you got this kind of flex, {user}?',
    'Ohhh we got some moola, {user}!',
    'üíé {user} out here with diamond wrists.',
    'ü™ô {user} just minted another flex.',
    'üè¶ Big baller {user} reporting in!',
    'üíº {user} just signed a Web3 deal in gold.',
    'üí≤ Rich? Nah. {user} is generational wealth now.'
  ],
  sad: [
    'üò¢ {user} is not vibing today.',
    'ü•Ä {user} having a not-so-good day.',
    '‚òî Someone hug {user} pls.',
    'üíî {user} feeling some Web3 blues.',
    'ü´† All down bad today, hang in there {user}.',
    'üìâ {user} portfolio crying too.',
    'üß∏ {user} needs some comfort NFTs.',
    'üòû Even the gas fees feel personal today, huh {user}?',
    'üßÉ Juice is gone, and so is {user}‚Äôs mood.',
    'ü™¶ Rip {user}‚Äôs vibes today.'
  ],
  angry: [
    'üî• {user} about to burn the whole thing down.',
    'üò§ Who poked {user}? They mad mad.',
    '‚ö†Ô∏è Rage level: Over 9000 for {user}.',
    'üí¢ {user} is seeing red today.',
    'üö® PSA: Do not cross {user} today.',
    'ü™ì {user} chopping rugs left and right.',
    'üö´ Not the day to shill near {user}.',
    'ü•ä {user} fighting FUD with fists.',
    'üß® {user} armed with alpha and attitude.',
    '‚ò†Ô∏è {user} going full rekt-mode on devs.'
  ],
  happy: [
    'üåû {user} shining brighter than the ETH candles.',
    'üï∫ {user} vibing to that mint rhythm!',
    'üéâ {user} is mint-high and mood-maxed!',
    'ü•Ç Cheers! {user} feeling top of the meta.',
    'üßÉ Juice full, vibes on peak ‚Äî {user} is UP!',
    'üéà {user} floating on Web3 dopamine.',
    'üê∏ {user} got a win and won‚Äôt shut up about it.',
    'üéÅ {user} just unwrapped some alpha joy.',
    'üòÑ Smiles minted. {user} got the airdrop of happiness.',
    'üåà Rainbow road unlocked for {user} today.'
  ],
  degen: [
    'üß† {user} just aped without checking the contract.',
    'üé≤ {user} bet it all on vibes and vibes alone.',
    'üßª {user} on chain toilet paper with style.',
    'üíä Red pill, blue pill? {user} ate both.',
    'üîÆ {user} saw the future‚Ä¶ and aped anyway.',
    'üìâ Floor crashed? {user} bought more.',
    'üï≥Ô∏è {user} in deep, and they‚Äôre smiling.',
    'üî• {user} burned ETH just to feel alive.',
    'ü•µ Gas pain? {user} says ‚Äúone more tx!‚Äù',
    'ü§° {user} laughing with tears and transaction fees.'
  ],
  bullish: [
    'üöÄ {user} sees nothing but green candles.',
    'üìà To the moon? Nah. {user} aiming for galaxies.',
    'ü¶ç {user} in full bull mode ‚Äî no breaks.',
    'üí™ {user} said ‚Äúlet me leverage that hopium.‚Äù',
    'üî• Charts on fire, just like {user}‚Äôs DMs.',
    'üêÇ Bull horns sharp, {user} charging!',
    'üì¢ {user} yelling ‚ÄúWAGMI‚Äù from the rooftops.',
    'üí∏ Dip? {user} don‚Äôt know her.',
    'ü™Ñ {user} sprinkled magic alpha on the charts.',
    'üíº SEC calling but {user} too busy moonwalking.'
  ],
  rekt: [
    'üíÄ {user} just got rekt beyond recognition.',
    'ü™¶ RIP {user}‚Äôs wallet, vibes, and portfolio.',
    'üöë Someone call 911 ‚Äî {user} just bought top.',
    'üìâ {user} living proof of ‚Äúbuy high, sell low.‚Äù',
    'üòµ {user} can‚Äôt even afford hopium anymore.',
    'ü•¥ {user} can‚Äôt tell rug from rare anymore.',
    'üò¨ {user} down so bad, they checking MySpace for alpha.',
    'üï≥Ô∏è {user} crawling out of a black hole of bags.',
    'üßº {user} got cleaned like a whale‚Äôs teeth.',
    'üìµ Don‚Äôt ask {user} about their last play.'
  ],
  legend: [
    'üèÜ {user} is built different.',
    'üëë Crown this legend: {user}.',
    'üåå {user} isn‚Äôt early ‚Äî they‚Äôre eternal.',
    'üìú {user} name forever on-chain.',
    'üíØ {user} is the alpha others copy.',
    'üéñÔ∏è {user} earned respect in every cycle.',
    'üî• Legendary gas fees? {user} paid them gladly.',
    'üîê {user} has the seed phrase to greatness.',
    'üïäÔ∏è {user} walked so we could mint.',
    '‚ö° {user} is the glitch in the meta.'
  ]
};

function getRandomFlavor(name, userMention) {
  const flavors = flavorMap[name] ?? [];
  if (flavors.length === 0) return null;
  const pick = flavors[Math.floor(Math.random() * flavors.length)];
  return pick.replace('{user}', userMention);
}

module.exports = {
  data: new SlashCommandBuilder()
    .setName('exp')
    .setDescription('Show a visual experience vibe')
    .addStringOption(option =>
      option.setName('name')
        .setDescription('Name of the expression (e.g. "rich")')
        .setRequired(true)
        .setAutocomplete(true)
    ),

  async execute(interaction, { pg }) {
    const ownerId = process.env.BOT_OWNER_ID;
    const isOwner = interaction.user.id === ownerId;

    const name = interaction.options.getString('name').toLowerCase();
    const guildId = interaction.guild?.id ?? null;
    const guildName = interaction.guild?.name ?? 'Unknown Server';
    const userMention = `<@${interaction.user.id}>`;

    const res = await pg.query(`
      SELECT * FROM expressions
      WHERE name = $1
      AND ($2 = $3 OR guild_id = $2 OR guild_id IS NULL)
      ORDER BY RANDOM()
      LIMIT 1
    `, [name, isOwner ? 'global' : guildId, guildId]);

    if (!res.rows.length && !flavorMap[name]) {
      return interaction.reply({ content: `‚ùå No expression named \`${name}\` found.`, flags: 64 });
    }

    const exp = res.rows[0];
    let serverTag = '';

    if (isOwner && exp.guild_id && exp.guild_id !== guildId) {
      serverTag = ` _(from ${guildName})_`;
    } else if (exp.guild_id === null) {
      serverTag = ' _(Global)_';
    }

    const customMessage = exp?.content?.includes('{user}')
      ? exp.content.replace('{user}', userMention)
      : getRandomFlavor(name, userMention) || `üí• ${userMention} is experiencing **"${name}"** energy today!`;

    const fullMessage = `${customMessage}${serverTag}`;

    if (exp?.type === 'image') {
      try {
        const imageRes = await fetch(exp.content);
        if (!imageRes.ok) throw new Error(`Image failed to load: ${imageRes.status}`);
        const file = new AttachmentBuilder(exp.content);
        return await interaction.reply({ content: fullMessage, files: [file] });
      } catch (err) {
        console.error('‚ùå Image fetch error:', err.message);
        return await interaction.reply({ content: `‚ö†Ô∏è Image broken, but:\n${fullMessage}`, flags: 64 });
      }
    }

    return interaction.reply({ content: fullMessage });
  }
};






